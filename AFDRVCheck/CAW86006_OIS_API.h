#ifndef __AW86006_OIS_API_DLL

#define __AW86006_OIS_API_DLL

#pragma once

#if defined(Q_OS_WIN)
#define DLLEXPORT Q_DECL_EXPORT
#define DLLIMPORT Q_DECL_IMPORT
#else
#define DLLIMPORT _declspec(dllimport)
#define DLLEXPORT _declspec(dllexport)
#endif

// Extern function list
typedef int (*ptrfunc_I2CRead)(BYTE DevId, BYTE AddrSize, BYTE* pAddr, BYTE RdSize, BYTE* pRdBuf);
typedef int (*ptrfunc_I2CWrite)(BYTE DevId, BYTE WrSize, BYTE* WrData);
typedef int (*ptrfunc_OutputLog)(const char* str);

typedef struct _sDLL_ExtFuncList
{
	ptrfunc_I2CRead pFunc_I2C_Read;
	ptrfunc_I2CWrite pFunc_I2C_Write;
	ptrfunc_OutputLog  pFunc_OutputLog;
} DLL_ExtFuncList;


enum IspError {
	RET_ISP_ADDR_ERROR = -1,
	RET_ISP_PBUF_ERROR = -2,
	RET_ISP_HANK_ERROR = -3,
	RET_ISP_JUMP_ERROR = -4,
	RET_ISP_FLASH_ERROR = -5,
	RET_ISP_SPACE_ERROR = -6,
	RET_ISP_FLASH_ERROR1 = -7,
	RET_ISP_FLASH_ERROR2 = -8,
	RET_ISP_FLASH_ERROR3 = -9,
};

enum I2cRet {
	RET_I2C_OK = 0,
};

enum FuncRet {
	RET_FUNCTION_OK = 0,
};


enum ExtFuncInitError {
	RET_EXTFUNCINIT_NULL = -1,
};

enum ResetChipError {
	RET_RESETCHIP_W_ASYN_ADDR_FAIL1 = -1,
	RET_RESETCHIP_W_ASYN_ADDR_FAIL2 = -2,
	RET_RESETCHIP_W_SLAVE_ADDR_FAIL1 = -3,
	RET_RESETCHIP_W_SLAVE_ADDR_FAIL2 = -4,
	RET_RESETCHIP_R_CHIPID_FAIL = -5,
	RET_RESETCHIP_CHIPID_FAIL = -6,
};

enum BootControlError {
	RET_BOOTCONTROL_W_ASYN_ADDR_FAIL1 = -1,
	RET_BOOTCONTROL_W_ASYN_ADDR_FAIL2 = -2,
	RET_BOOTCONTROL_W_SLAVE_ADDR_FAIL1 = -3,
	RET_BOOTCONTROL_W_SLAVE_ADDR_FAIL2 = -4,
};


enum JumpInstructionError {
	RET_JUMPINSTRUCTION_FAIL = -1,
};

enum ShakeHandsError {
	RET_SHAKEHANDSREADBACK_FAIL = -1,
};

enum OisOnError {
	RET_OISON_W_FAIL = -1,
	RET_OISON_FAIL = -2,
	RET_OISON_R_FAIL = -3,
};

enum OisOffError {
	RET_OISOFF_W_FAIL = -1,
	RET_OISOFF_FAIL = -2,
	RET_OISOFF_R_FAIL = -3,
};

enum HallCalError {
	RET_HALLCAL_OISOFF_UPDATE1_FAIL = -1,
	RET_HALLCAL_UNLOCK_CCM_FAIL = -2,
	RET_HALLCAL_UNLOCK_FLASH_FAIL = -3,
	RET_HALLCAL_UPDATE1_FAIL = -4,
	RET_HALLCAL_W_TEST_ITEM_FAIL = -5,
	RET_HALLCAL_W_CCM_EN_FAIL = -6,
	RET_HALLCAL_CCM_TRIGGER_FAIL = -7,
	RET_HALLCAL_READ_CCM_STATUS_FAIL = -8,
	RET_HALLCAL_CCM_EN0_FAIL = -9,
	RET_HALLCAL_WRITE_CCM_EN_FAIL = -10,
	RET_HALLCAL_CCM_PROTECT_FAIL = -11,
	RET_HALLCAL_OISOFF_UPDATE2_FAIL = -12,
	RET_HALLCAL_UPDATE2_FAIL = -13,
	RET_HALLCAL_W_CCM_TRIGGER_FAIL = -14,
	RET_HALLCAL_R_HALL_BIAS_FAIL = -15,
	RET_HALLCAL_HALL_BIAS_OUTRANGE_FAIL = -16,
	RET_HALLCAL_W_HALLBIASX_FAIL = -17,
	RET_HALLCAL_R_HALLBIASX_FAIL = -18,
	RET_HALLCAL_COMPARE_HALLBIASX_FAIL = -19,
	RET_HALLCAL_R_PGAGAINX_FAIL = -20,
	RET_HALLCAL_PGAGAINX_OUTRANGE_FAIL = -21,
	RET_HALLCAL_W_PGAGAINX_FAIL = -22,
	RET_HALLCAL_COMPARE_PGAGAINX_FAIL = -23,
	RET_HALLCAL_R_PGAGAINY_FAIL = -24,
	RET_HALLCAL_PGAGAINY_OUTRANGE_FAIL = -25,
	RET_HALLCAL_W_PGAGAINY_FAIL = -26,
	RET_HALLCAL_COMPARE_PGAGAINY_FAIL = -27,
	RET_HALLCAL_W_HALLBIASY_FAIL = -28,
	RET_HALLCAL_R_HALLBIASY_FAIL = -29,
	RET_HALLCAL_COMPARE_HALLBIASY_FAIL = -30,
	RET_HALLCAL_R_TEST_ITEM_FAIL = -31,
	RET_HALLCAL_COMPARE_TESTITEM_FAIL = -32,
	RET_HALLCAL_R_CCM_EN_FAIL = -33,
	RET_HALLCAL_R_CCM_STATUS_FAIL = -34,
};

enum GyroOffsetError {
	RET_GYROOFFSET_OISOFF_UPDATE1_FAIL = -1,
	RET_GYROOFFSET_UNLOCK_CCM_FAIL = -2,
	RET_GYROOFFSET_UNLOCK_FLASH_FAIL = -3,
	RET_GYROOFFSET_UPDATE1_FAIL = -4,
	RET_GYROOFFSET_W_TEST_ITEM_FAIL = -5,
	RET_GYROOFFSET_NOT_W_TEST_ITEM_FAIL = -6,
	RET_GYROOFFSET_W_CCM_EN1_FAIL = -7,
	RET_GYROOFFSET_NOT_W_CCM_EN1_FAIL = -8,
	RET_GYROOFFSET_W_CCM_TRIGGER_FAIL = -9,
	RET_GYROOFFSET_NOT_W_CCM_TRIGGER_FAIL = -10,
	RET_GYROOFFSET_READ_CCM_STATUS_FAIL = -11,
	RET_GYROOFFSET_CCM_EN0_FAIL = -12,
	RET_GYROOFFSET_WRITE_CCM_EN_FAIL = -13,
	RET_GYROOFFSET_OISOFF_UPDATE2_FAIL = -14,
	RET_GYROOFFSET_UPDATE2_FAIL = -15,
	RET_GYROOFFSET_CCM_PROTECT_FAIL = -16,
	RET_GYROOFFSET_R_TEST_ITEM_FAIL = -17,
	RET_GYROOFFSET_R_CCM_EN1_FAIL = -18,
	RET_GYROOFFSET_R_CCM_STATUS_FAIL = -19,
	RET_GYROOFFSET_R_CCM_EN_FAIL = -20,
	RET_GYROOFFSET_R_OIS_STATUS_FAIL = -21,
	RET_GYROOFFSET_R_GYRO_CONFIG_FAIL = -22,
	RET_GYROOFFSET_W_GYRO_CONFIG_FAIL = -23,
	RET_GYROOFFSET_GYRO_STATUS_FAIL = -24,
};

enum GetCalDataError {
	RET_GETCALDATA_R_PGA_GAIN_X_FAIL = -1,
	RET_GETCALDATA_R_HALL_BIAS_X_FAIL = -2,
	RET_GETCALDATA_R_GYRO_DIFT_X_FAIL = -3,
	RET_GETCALDATA_R_DISTANCE_POS_LIMIT_X_FAIL = -4,
	RET_GETCALDATA_R_DISTANCE_POS_LIMIT_Y_FAIL = -5,
	RET_GETCALDATA_R_DISTANCE_NEG_LIMIT_X_FAIL = -6,
	RET_GETCALDATA_R_DISTANCE_NEG_LIMIT_Y_FAIL = -7,
	RET_GETCALDATA_R_GYRO_GAIN2_X_FAIL = -8,
	RET_GETCALDATA_R_GYRO_GAIN2_Y_FAIL = -9,
	RET_GETCALDATA_R_GYRO_GAIN0_X_FAIL = -10,
	RET_GETCALDATA_R_GYRO_GAIN0_Y_FAIL = -11,
	RET_GETCALDATA_R_CROSSTALK_X_A0_FAIL = -12,
	RET_GETCALDATA_R_CROSSTALK_Y_A0_FAIL = -13,
	RET_GETCALDATA_R_CROSSTALK_X_B0_FAIL = -14,
	RET_GETCALDATA_R_CROSSTALK_Y_B0_FAIL = -15,
	RET_GETCALDATA_R_CROSSTALK_X_C0_FAIL = -16,
	RET_GETCALDATA_R_CROSSTALK_Y_C0_FAIL = -17,
	RET_GETCALDATA_R_ADC_CODE_X_FAIL = -18,
	RET_GETCALDATA_R_ADC_CODE_Y_FAIL = -19,
	RET_GETCALDATA_R_LINE_K_X_FAIL = -20,
	RET_GETCALDATA_R_LINE_K_Y_FAIL = -21,
	RET_GETCALDATA_R_LINE_B_X_FAIL = -22,
	RET_GETCALDATA_R_LINE_B_Y_FAIL = -23,
	RET_GETCALDATA_R_GYRO_SIN_FAIL = -24,
	RET_GETCALDATA_R_GYRO_COS_FAIL = -25,
	RET_GETCALDATA_R_PIXEL_STEP_X_FAIL = -26,
	RET_GETCALDATA_R_PIXEL_STEP_Y_FAIL = -27,
	RET_GETCALDATA_R_LENS_OFFSET_X_FAIL = -28,
	RET_GETCALDATA_R_LENS_OFFSET_Y_FAIL = -29,
	RET_GETCALDATA_R_CROSSTALK_K0_X_FAIL = -30,
	RET_GETCALDATA_R_CROSSTALK_K1_X_FAIL = -31,
	RET_GETCALDATA_R_CROSSTALK_K0_Y_FAIL = -32,
	RET_GETCALDATA_R_CROSSTALK_K1_Y_FAIL = -33,
	RET_GETCALDATA_FLASH_READ_FAIL = -34,
	RET_GETCALDATA_R_PGA_GAIN_Y_FAIL = -35,
	RET_GETCALDATA_R_HALL_BIAS_Y_FAIL = -36,
	RET_GETCALDATA_R_HALL_OFFSET_X_FAIL = -37,
	RET_GETCALDATA_R_HALL_OFFSET_Y_FAIL = -38,
	RET_GETCALDATA_R_GYRO_DIFT_Y_FAIL = -39,
	RET_GETCALDATA_R_GYRO_DIFT_Z_FAIL = -40,
	RET_GETCALDATA_R_AFDRIFT_X_A0_FAIL = -41,
	RET_GETCALDATA_R_AFDRIFT_Y_A0_FAIL = -42,
	RET_GETCALDATA_R_AFDRIFT_X_B0_FAIL = -43,
	RET_GETCALDATA_R_AFDRIFT_Y_B0_FAIL = -44,
	RET_GETCALDATA_R_AFDRIFT_X_C0_FAIL = -45,
	RET_GETCALDATA_R_AFDRIFT_Y_C0_FAIL = -46,
};

enum FlashEraseError {
	RET_FLASHERASE_OISOFF_FAIL = -1,
	RET_FLASHERASE_UNLOCK_FAIL = -2,
	RET_FLASHERASE_FAIL = -3,
	RET_FLASHERASE_W_ERASEKEY_FAIL = -4,
	RET_FLASHERASE_R_ERASEKEY_FAIL = -5,
	RET_FLASHERASE_COMPARE_ERASEKEY_FAIL = -6,
};

enum FlashUpdateError {
	RET_FLASHUPDATE_OISOFF_FAIL = -1,
	RET_FLASHUPDATE_UNLOCK_FAIL = -2,
	RET_FLASHUPDATE_FAIL = -3,
	RET_FLASHUPDATE_GETREGCALDATA_FAIL = -4,
	RET_FLASHUPDATE_GETCALDATA_FAIL = -5,
	RET_FLASHUPDATE_DATA_COMPARE_FAIL = -6,
};

enum FlashReadError {
	RET_FLASHREAD_OISOFF_FAIL = -1,
	RET_FLASHREAD_UNLOCK_FAIL = -2,
	RET_FLASHREAD_FAIL = -3,
};

enum UnLockProtectError {
	RET_UNLOCKPROTECT_FAIL = -1,
	RET_UNLOCKPROTECT_W_PASSWORD_FAIL = -2,
	RET_UNLOCKPROTECT_R_FAIL = -3,
};

enum UnLockFlashProtectError {
	RET_UNLOCKFLASHPROTECT_WRITE_FAIL = -1,
	RET_UNLOCKFLASHPROTECT_FAIL = -2,
	RET_UNLOCKFLASHPROTECT_R_FAIL = -3,
};

enum LockFlashProtectError {
	RET_LOCKFLASHPROTECT_WRITE_FAIL = -1,
	RET_LOCKFLASHPROTECT_FAIL = -2,
	RET_LOCKFLASHPROTECT_R_FAIL = -3,
};

enum UnLockDebugProtectError {
	RET_UNLOCKDEBUGPROTECT_WRITE_FAIL = -1,
	RET_UNLOCKDEBUGPROTECT_FAIL = -2,
	RET_UNLOCKDEBUGPROTECT_R_FAIL = -3,
};

enum LockDebugProtectError {
	RET_LOCKDEBUGPROTECT_WRITE_FAIL = -1,
	RET_LOCKDEBUGPROTECT_FAIL = -2,
	RET_LOCKDEBUGPROTECT_R_FAIL = -3,
};

enum WriteAfCodeError {
	RET_WRITEAFCODE_W_AFCODE_FAIL = -1,
	RET_WRITEAFCODE_R_AFCODE_FAIL = -2,
	RET_WRITEAFCODE_COMPARE_AFCODE_FAIL = -3,
};

enum WriteAfArctError {
	RET_WRITEAFARCT_AFARCT_VALUE_ERROR = -1,
	RET_WRITEAFARCT_W_AFARCT_FAIL = -2,
	RET_WRITEAFARCT_R_AFARCT_FAIL = -3,
	RET_WRITEAFARCT_COMPARE_AFARCT_FAIL = -4,
};

enum WriteAfDivModeError {
	RET_WRITEAFDIVMODE_DIVMODE_VALUE_ERROR = -1,
	RET_WRITEAFDIVMODE_W_FAIL = -2,
	RET_WRITEAFDIVMODE_R_FAIL = -3,
	RET_WRITEAFDIVMODE_COMPARE_FAIL = -4,
};

enum WriteAmpPeriodError {
	RET_WRITEAMPPERIOD_OISOFF_UPDATE_FAIL = -1,
	RET_WRITEAMPPERIOD_UNLOCK_FAIL = -2,
	RET_WRITEAMPPERIOD_W_FAIL = -3,
	RET_WRITEAMPPERIOD_R_FAIL = -4,
	RET_WRITEAMPPERIOD_COMPARE_FAIL =-5,
};

enum WriteGyroGain0XError {
	RET_WRITEGYROGAIN0X_W_GYROGAINX_FAIL = -1,
	RET_WRITEGYROGAIN0X_R_GYROGAINX_FAIL = -2,
	RET_WRITEGYROGAIN0X_COMPARE_GYROGAINX_FAIL = -3,
};

enum WriteGyroGain0YError {
	RET_WRITEGYROGAIN0Y_W_GYROGAINY_FAIL = -1,
	RET_WRITEGYROGAIN0Y_R_GYROGAINY_FAIL = -2,
	RET_WRITEGYROGAIN0Y_COMPARE_GYROGAINY_FAIL = -3,
};

enum WriteAcclGainXError {
	RET_WRITEACCEGAINX_W_ACCLGAINX_FAIL = -1,
	RET_WRITEACCEGAINX_R_ACCLGAINX_FAIL = -2,
	RET_WRITEACCEGAINX_COMPARE_ACCLGAINX_FAIL = -3,
};

enum WriteAcclGainYError {
	RET_WRITEACCEGAINY_W_ACCLGAINY_FAIL = -1,
	RET_WRITEACCEGAINY_R_ACCLGAINY_FAIL = -2,
	RET_WRITEACCEGAINY_COMPARE_ACCLGAINY_FAIL = -3,
};

enum WriteGyroSinError {
	RET_WRITEGYROSIN_W_GYROSIN_FAIL = -1,
	RET_WRITEGYROSIN_R_GYROSIN_FAIL = -2,
	RET_WRITEGYROSIN_COMPARE_GYROSIN_FAIL = -3,
};

enum WriteGyroCosError {
	RET_WRITEGYROCOS_W_GYROCOS_FAIL = -1,
	RET_WRITEGYROCOS_R_GYROCOS_FAIL = -2,
	RET_WRITEGYROCOS_COMPARE_GYROCOS_FAIL = -3,
};

enum ReadGyroGain0Error {
	RET_READGYROGAIN0_X_FAIL = -1,
	RET_READGYROGAIN0_Y_FAIL = -2,
};

enum ReadAcclGainError {
	RET_READACCLGAIN_X_FAIL = -1,
	RET_READACCLGAIN_Y_FAIL = -2,
};

enum GetVersionIdError {
	RET_GETVERSIONID_FAIL = -1,
};

enum WriteTargetXError {
	RET_WRITETARGETX_W_TARGETX_FAIL = -1,
	RET_WRITETARGETX_R_TARGETX_FAIL = -2,
	RET_WRITETARGETX_COMPARE_FAIL = -3,
};

enum WriteTargetYError {
	RET_WRITETARGETY_W_TARGETY_FAIL = -1,
	RET_WRITETARGETY_R_TARGETY_FAIL = -2,
	RET_WRITETARGETY_COMPARE_FAIL = -3,
};

enum WriteLoopGainXError {
	RET_WRITELOOPGAINX_W_LOOPGAINX_FAIL = -1,
	RET_WRITELOOPGAINX_R_LOOPGAINX_FAIL = -2,
	RET_WRITELOOPGAINX_COMPARE_LOOPGAINX_FAIL = -3,
};

enum WriteLoopGainYError {
	RET_WRITELOOPGAINY_W_LOOPGAINY_FAIL = -1,
	RET_WRITELOOPGAINY_R_LOOPGAINY_FAIL = -2,
	RET_WRITELOOPGAINY_COMPARE_LOOPGAINY_FAIL = -3,
};

enum WriteDistancePosLimitXError {
	REG_DISTANCEPOSLIMITX_W_FAIL = -1,
	REG_DISTANCEPOSLIMITX_R_FAIL = -2,
	REG_DISTANCEPOSLIMITX_COMPARE_FAIL = -3,
};

enum WriteDistancePosLimitYError {
	REG_DISTANCEPOSLIMITY_W_FAIL = -1,
	REG_DISTANCEPOSLIMITY_R_FAIL = -2,
	REG_DISTANCEPOSLIMITY_COMPARE_FAIL = -3,
};

enum WriteDistanceNegLimitXError {
	REG_DISTANCENEGLIMITX_W_FAIL = -1,
	REG_DISTANCENEGLIMITX_R_FAIL = -2,
	REG_DISTANCENEGLIMITX_COMPARE_FAIL = -3,
};

enum WriteDistanceNegLimitYError {
	REG_DISTANCENEGLIMITY_W_FAIL = -1,
	REG_DISTANCENEGLIMITY_R_FAIL = -2,
	REG_DISTANCENEGLIMITY_COMPARE_FAIL = -3,
};

enum WriteCrosstalkParError {
	RET_WRITECROSSTALKPAR_W_CROSSTALKXA0_FAIL = -1,
	RET_WRITECROSSTALKPAR_W_CROSSTALKYA0_FAIL = -2,
	RET_WRITECROSSTALKPAR_W_CROSSTALKXB0_FAIL = -3,
	RET_WRITECROSSTALKPAR_W_CROSSTALKYB0_FAIL = -4,
	RET_WRITECROSSTALKPAR_W_CROSSTALKXC0_FAIL = -5,
	RET_WRITECROSSTALKPAR_W_CROSSTALKYC0_FAIL = -6,
};

enum DriveCrosstalkError {
	RET_DRIVECROSSTALK_OISOFF_UPDATE1_FAIL = -1,
	RET_DRIVECROSSTALK_UNLOCK_DEBUG_FAIL = -2,
	RET_DRIVECROSSTALK_UNLOCK_FLASH_FAIL = -3,
	RET_DRIVECROSSTALK_UNLOCK_CCM_FAIL = -4,
	RET_DRIVECROSSTALK_UPDATE1_FAIL = -5,
	RET_DRIVECROSSTALK_OPENLOOP_FAIL = -6,
	RET_DRIVECROSSTALK_OISON_FAIL = -7,
	RET_DRIVECROSSTALK_CCM_EN_FAIL = -8,
	RET_DRIVECROSSTALK_CCM_TEST_ITEM_FAIL = -9,
	RET_DRIVECROSSTALK_CCM_TRIGGER_FAIL = -10,
	RET_DRIVECROSSTALK_W_CCM_EN_FAIL = -11,
	RET_DRIVECROSSTALK_R_CCM_EN_FAIL = -12,
};

enum CrosstalkCalError {
	RET_CROSSTALKCAL_OUT_OF_RANGE = -1,
};

enum CloseCrosstalkError {
	RET_CLOSECROSSTALK_CCM_EN_FAIL = -1,
	RET_CLOSECROSSTALK_OISOFF_UPDATE1_FAIL = -2,
	RET_CLOSECROSSTALK_UPDATE2_FAIL = -3,
	RET_CLOSECROSSTALK_W_TARGETX0_FAIL = -4,
	RET_CLOSECROSSTALK_W_TARGETY0_FAIL = -5,
	RET_CLOSECROSSTALK_W_CCM_EN_FAIL = -6,
	RET_CLOSECROSSTALK_R_CCM_EN_FAIL = -7,
};

enum LoopGainCalError {
	RET_LOOPGAINCAL_OISOFF_UPDATE1_FAIL = -1,
	RET_LOOPGAINCAL_UNLOCK_CCM_FAIL = -2,
	RET_LOOPGAINCAL_UNLOCK_DEBUG_FAIL = -3,
	RET_LOOPGAINCAL_UNLOCK_FLASH_FAIL = -4,
	RET_LOOPGAINCAL_STEPON_FAIL = -5,
	RET_LOOPGAINCAL_SINEPAR_FAIL = -6,
	RET_LOOPGAINCAL_UPDATE1_FAIL = -7,
	RET_LOOPGAINCAL_OISON_FAIL = -8,
	RET_LOOPGAINCAL_W_CCM_EN_FAIL1 = -9,
	RET_LOOPGAINCAL_CCM_TEST_ITEM_FAIL = -10,
	RET_LOOPGAINCAL_W_GYRO_GAIN2_X_FAIL1 = -11,
	RET_LOOPGAINCAL_W_CCM_TRIGGER_FAIL1 = -12,
	RET_LOOPGAINCAL_R_VARIANCE_X_FAIL1 = -13,
	RET_LOOPGAINCAL_W_GYRO_GAIN2_X_FAIL2 = -14,
	RET_LOOPGAINCAL_W_CCM_TRIGGER_FAIL2 = -15,
	RET_LOOPGAINCAL_R_VARIANCE_X_FAIL2 = -16,
	RET_LOOPGAINCAL_W_LOOPGAIN_X_FAIL3 = -17,
	RET_LOOPGAINCAL_W_LOOPGAIN_Y_FAIL3 = -18,
	RET_LOOPGAINCAL_W_CCM_TRIGGER_FAIL3 = -19,
	RET_LOOPGAINCAL_R_VARIANCE_Y_FAIL1 = -20,
	RET_LOOPGAINCAL_W_GYRO_GAIN2_Y_FAIL2 = -21,
	RET_LOOPGAINCAL_W_CCM_TRIGGER_FAIL4 = -22,
	RET_LOOPGAINCAL_R_VARIANCE_Y_FAIL2 = -23,
	RET_LOOPGAINCAL_W_LOOPGAIN_Y_FAIL = -24,
	RET_LOOPGAINCAL_W_CCM_EN_FAIL2 = -25,
	RET_LOOPGAINCAL_NOT_W_CCM_EN1_FAIL = -26,
	RET_LOOPGAINCAL_OISOFF_UPDATE2_FAIL = -27,
	RET_LOOPGAINCAL_UPDATE2_FAIL = -28,
	RET_LOOPGAINCAL_W_SINEEN1_FAIL = -29,
	RET_LOOPGAINCAL_W_SINEEN2_FAIL = -30,
	RET_LOOPGAINCAL_W_SINEEN0_FAIL = -31,
	RET_LOOPGAINCAL_W_LOOPGAINX1_FAIL = -32,
	RET_LOOPGAINCAL_W_LOOPGAINY1_FAIL = -33,
	RET_LOOPGAINCAL_OUTRANGE_FAIL = -34,
	RET_LOOPGAINCAL_R_LOOPGAIN_X_FAIL = -35,
	RET_LOOPGAINCAL_LOOPGAIN_X_COMPARE_FAIL = -36,
	RET_LOOPGAINCAL_R_LOOPGAIN_Y_FAIL = -37,
	RET_LOOPGAINCAL_LOOPGAIN_Y_COMPARE_FAIL = -38,
	RET_LOOPGAINCAL_R_CCM_EN_FAIL2 = -39,
};

enum LoopGainCal2Error {
	RET_LOOPGAINCAL2_OISOFF_FAIL = -1,
	RET_LOOPGAINCAL2_UNLOCK_DEBUG_FAIL = -2,
	RET_LOOPGAINCAL2_UNLOCK_FLASH_FAIL = -3,
	RET_LOOPGAINCAL2_UPDATE1_FAIL = -4,
	RET_LOOPGAINCAL2_OISON_FAIL = -5,
	RET_LOOPGAINCAL2_OPENLOOP_FAIL = -6,
	RET_LOOPGAINCAL2_GETFINISHFLAG_FAIL = -7,
	RET_LOOPGAINCAL2_OISOFF2_FAIL = -8,
	RET_LOOPGAINCAL2_W_LOOPGAINX_FAIL = -9,
	RET_LOOPGAINCAL2_W_LOOPGAINY_FAIL = -10,
	RET_LOOPGAINCAL2_UPDATE2_FAIL = -11,
	RET_LOOPGAINCAL2_AMP_OUTOFRANGE = -12,
	RET_LOOPGAINCAL2_W_LOOPGAINX1_FAIL = -13,
	RET_LOOPGAINCAL2_W_LOOPGAINY1_FAIL = -14,
	RET_LOOPGAINCAL2_LOOPGAINX_OUTRANGE_FAIL = -15,
	RET_LOOPGAINCAL2_LOOPGAINY_OUTRANGE_FAIL = -16,
	RET_LOOPGAINCAL2_R_LOOPGAIN_X_FAIL = -17,
	RET_LOOPGAINCAL2_LOOPGAIN_X_COMPARE_FAIL = -18,
	RET_LOOPGAINCAL2_R_LOOPGAIN_Y_FAIL = -19,
	RET_LOOPGAINCAL2_LOOPGAIN_Y_COMPARE_FAIL = -20,
};

enum ServeOnError {
	RET_SERVEON_OISOFF_FAIL = -1,
	RET_SERVEON_UNLOCK_DEBUG_FAIL = -2,
	RET_SERVEON_SERVOON_FAIL = -3,
	RET_SERVEON_OISON_FAIL = -4,
	RET_SERVEON_W_TARGET_X_FAIL = -5,
	RET_SERVEON_W_TARGET_Y_FAIL = -6,
};

enum ServeOffError {
	RET_SERVEOFF_OISOFF_FAIL = -1,
};

enum LinearComeToCenterError {
	RET_COMETOCENTER_W_TARGETXY_FAIL = -1,
	RET_COMETOCENTER_W_ADCOUTXY_FAIL = -2,
	RET_COMETOCENTER_TIMES_FAIL = -3,
};

enum WriteLoopStatusError {
	RET_WRITELOOPSTATUS_W_LOOPSTATUS_FAIL = -1,
	RET_WRITELOOPSTATUS_R_LOOPSTATUS_FAIL = -2,
	RET_WRITELOOPSTATUS_COMPARE_LOOPSTATUS_FAIL = -3,
};

enum ReadAdcError {
	RET_READ_ADC_X_FAIL = -1,
	RET_READ_ADC_Y_FAIL = -2,
};

enum WriteAdcCodeKBError {
	RET_WRITEADCCODEKB_OISOFF_UPDATE1_FAIL = -1,
	RET_WRITEADCCODEKB_UNLOCK_FLASH_FAIL = -2,
	RET_WRITEADCCODEKB_UPDATE1_FAIL = -3,
	RET_WRITEADCCODEKB_W_ADC_CODE_X_FAIL = -4,
	RET_WRITEADCCODEKB_W_ADC_CODE_Y_FAIL = -5,
	RET_WRITEADCCODEKB_W_LINE_K_X_FAIL = -6,
	RET_WRITEADCCODEKB_W_LINE_K_Y_FAIL = -7,
	RET_WRITEADCCODEKB_W_LINE_B_X_FAIL = -8,
	RET_WRITEADCCODEKB_W_LINE_B_Y_FAIL = -9,
	RET_WRITEADCCODEKB_OISOFF_UPDATE2_FAIL = -10,
	RET_WRITEADCCODEKB_UPDATE2_FAIL = -11,
};

enum FraTestError {
	RET_FRATEST_AMP_OUT_OF_RANGE = -1,
	RET_FRATEST_OISOFF_FAIL1 = -2,
	RET_FRATEST_UNLOCK_DEBUG_PROTECT_FAIL = -3,
	RET_FRATEST_OISON_FAIL = -4,
	RET_FRATEST_W_LOOPSTATUS_FAIL = -5,
	RET_FRATEST_W_FRA_PAR_FAIL = -6,
	RET_FRATEST_W_FRA_FRE_FAIL = -7,
	RET_FRATEST_W_FRA_FLAG_START_FAIL = -8,
	RET_FRATEST_FRA_FLAG_FAIL = -9,
	RET_FRATEST_CLOSE_STEPON_FAIL = -10,
	RET_FRATEST_OISOFF_FAIL2 = -11,
};

enum RestoreLinearFittingDefaultError {
	RET_RELINEARFITTINGDEFAULT_OISOFF_FAIL = -1,
	RET_RELINEARFITTINGDEFAULT_UNLOCK_FLASH_PROTECT_FAIL = -2,
	RET_RELINEARFITTINGDEFAULT_FLASH_UPDATE_FAIL = -3,
	RET_RELINEARFITTINGDEFAULT_W_ADC_CODE_X_FAIL = -4,
	RET_RELINEARFITTINGDEFAULT_W_ADC_CODE_Y_FAIL = -5,
	RET_RELINEARFITTINGDEFAULT_W_LINE_K_X_FAIL = -6,
	RET_RELINEARFITTINGDEFAULT_W_LINE_K_Y_FAIL = -7,
	RET_RELINEARFITTINGDEFAULT_W_LINE_B_X_FAIL = -8,
	RET_RELINEARFITTINGDEFAULT_W_LINE_B_Y_FAIL = -9,
};

enum ReadLineOutError {
	RET_READLINEOUT_R_LINEOUTX_FAIL = -1,
	RET_READLINEOUT_R_LINEOUTY_FAIL = -2,
};

enum DrawCircleOnError {
	RET_DRAWCIRCLEON_OISOFF_FAIL = -1,
	RET_DRAWCIRCLEON_UNLOCK_DEBUG_FAIL = -2,
	REG_DRAWCIRCLEON_W_SINEEN_FAIL = -3,
	REG_DRAWCIRCLEON_W_SINEPAR_FAIL = -4,
	RET_DRAWCIRCLEON_STEPON_FAIL = -5,
	RET_DRAWCIRCLEON_OISON_FAIL = -6,
	REG_DRAWCIRCLEON_R_SINEEN_FAIL = -7,
	REG_DRAWCIRCLEON_COMPARE_SINEEN_FAIL = -8,
	REG_DRAWCIRCLEON_R_SINEPAR_FAIL = -9,
	REG_DRAWCIRCLEON_COMPARE_SINEPAR_FAIL = -10,
};

enum DrawCircleOffError {
	RET_DRAWCIRCLEOFF_OISOFF_FAIL = -1,
	RET_DRAWCIRCLEOFF_STEPON_FAIL = -2,
	REG_DRAWCIRCLEOFF_W_SINEEN_FAIL = -3,
	RET_DRAWCIRCLEOFF_W_SINEPAR_FAIL = -4,
	REG_DRAWCIRCLEOFF_R_SINEEN_FAIL = -5,
	REG_DRAWCIRCLEOFF_COMPARE_SINEEN_FAIL = -6,
	RET_DRAWCIRCLEOFF_R_SINEPAR_FAIL = -7,
	RET_DRAWCIRCLEOFF_COMPARE_SINEPAR_FAIL = -8,
};

enum DrawSquareOnError {
	RET_DRAWSQUAREON_OISOFF_FAIL = -1,
	RET_DRAWSQUAREON_UNLOCK_DEBUG_FAIL = -2,
	REG_DRAWSQUAREON_W_SINEEN_FAIL = -3,
	REG_DRAWSQUAREON_W_SQUAREPAR_FAIL = -4,
	RET_DRAWSQUAREON_STEPON_FAIL = -5,
	RET_DRAWSQUAREON_OISON_FAIL = -6,
	REG_DRAWSQUAREON_R_SINEEN_FAIL = -7,
	REG_DRAWSQUAREON_COMPARE_SINEEN_FAIL = -8,
	REG_DRAWSQUAREON_R_SQUAREPAR_FAIL = -9,
	REG_DRAWSQUAREON_COMPARE_SQUAREPAR_FAIL = -10,
};

enum DrawSquareOffError {
	RET_DRAWSQUAREOFF_OISOFF_FAIL = -1,
	RET_DRAWSQUAREOFF_STEPON_FAIL = -2,
	REG_DRAWSQUAREOFF_W_SINEEN_FAIL = -3,
	REG_DRAWSQUAREOFF_W_SQUAREPAR_FAIL = -4,
	REG_DRAWSQUAREOFF_R_SINEEN_FAIL = -5,
	REG_DRAWSQUAREOFF_COMPARE_SINEEN_FAIL = -6,
	REG_DRAWSQUAREOFF_R_SQUAREPAR_FAIL = -7,
	REG_DRAWSQUAREOFF_COMPARE_SQUAREPAR_FAIL = -8,
};

enum WriteK0K1XError {
	RET_WRITEK0K1X_W_K0X_FAIL = -1,
	RET_WRITEK0K1X_R_K0X_FAIL = -2,
	RET_WRITEK0K1X_COMPARE_K0X_FAIL = -3,
	RET_WRITEK0K1X_W_K1X_FAIL = -4,
	RET_WRITEK0K1X_R_K1X_FAIL = -5,
	RET_WRITEK0K1X_COMPARE_K1X_FAIL = -6,
};

enum WriteK0K1YError {
	RET_WRITEK0K1Y_W_K0Y_FAIL = -1,
	RET_WRITEK0K1Y_R_K0Y_FAIL = -2,
	RET_WRITEK0K1Y_COMPARE_K0Y_FAIL = -3,
	RET_WRITEK0K1Y_W_K1Y_FAIL = -4,
	RET_WRITEK0K1Y_R_K1Y_FAIL = -5,
	RET_WRITEK0K1Y_COMPARE_K1Y_FAIL = -6,
};

enum CrossLineCalError {
	RET_CROSSLINECAL_SEL_NONE_FAIL = -1,
};

enum WriteCrosstalkParToRegError {
	RET_WRITECROSSTALKPARTOREG_WRITEA0X_FAIL = -1,
	RET_WRITECROSSTALKPARTOREG_WRITEB0X_FAIL = -2,
	RET_WRITECROSSTALKPARTOREG_WRITEC0X_FAIL = -3,
	RET_WRITECROSSTALKPARTOREG_WRITEA0Y_FAIL = -4,
	RET_WRITECROSSTALKPARTOREG_WRITEB0Y_FAIL = -5,
	RET_WRITECROSSTALKPARTOREG_WRITEC0Y_FAIL = -6,
	RET_WRITECROSSTALKPARTOREG_WRITEPIXELX_FAIL = -7,
	RET_WRITECROSSTALKPARTOREG_WRITEPIXELY_FAIL = -8,
	RET_WRITECROSSTALKPARTOREG_R_A0X_FAIL = -9,
	RET_WRITECROSSTALKPARTOREG_COMPARE_A0X_FAIL = -10,
	RET_WRITECROSSTALKPARTOREG_R_B0X_FAIL = -11,
	RET_WRITECROSSTALKPARTOREG_COMPARE_B0X_FAIL = -12,
	RET_WRITECROSSTALKPARTOREG_R_C0X_FAIL = -13,
	RET_WRITECROSSTALKPARTOREG_COMPARE_C0X_FAIL = -14,
	RET_WRITECROSSTALKPARTOREG_R_A0Y_FAIL = -15,
	RET_WRITECROSSTALKPARTOREG_COMPARE_A0Y_FAIL = -16,
	RET_WRITECROSSTALKPARTOREG_R_B0Y_FAIL = -17,
	RET_WRITECROSSTALKPARTOREG_COMPARE_B0Y_FAIL = -18,
	RET_WRITECROSSTALKPARTOREG_R_C0Y_FAIL = -19,
	RET_WRITECROSSTALKPARTOREG_COMPARE_C0Y_FAIL = -20,
	RET_WRITECROSSTALKPARTOREG_R_PIXELSTEPX_FAIL = -21,
	RET_WRITECROSSTALKPARTOREG_COMPARE_PIXELSTEPX_FAIL = -22,
	RET_WRITECROSSTALKPARTOREG_R_PIXELSTEPY_FAIL = -23,
	RET_WRITECROSSTALKPARTOREG_COMPARE_PIXELSTEPY_FAIL = -24,

};

enum WriteLinearFitParToRegError {
	RET_WRITELINEARFITPARTOREG_WRITEADCCODEX_FAIL = -1,
	RET_WRITELINEARFITPARTOREG_WRITEADCCODEY_FAIL = -2,
	RET_WRITELINEARFITPARTOREG_WRITEKX_FAIL = -3,
	RET_WRITELINEARFITPARTOREG_WRITEKY_FAIL = -4,
	RET_WRITELINEARFITPARTOREG_WRITEBX_FAIL = -5,
	RET_WRITELINEARFITPARTOREG_WRITEBY_FAIL = -6,
	RET_WRITELINEARFITPARTOREG_R_ADCCODEX_FAIL = -7,
	RET_WRITELINEARFITPARTOREG_COMPARE_ADCCODEX_FAIL = -8,
	RET_WRITELINEARFITPARTOREG_R_ADCCODEY_FAIL = -9,
	RET_WRITELINEARFITPARTOREG_COMPARE_ADCCODEY_FAIL = -10,
	RET_WRITELINEARFITPARTOREG_R_KX_FAIL = -11,
	RET_WRITELINEARFITPARTOREG_COMPARE_KX_FAIL = -12,
	RET_WRITELINEARFITPARTOREG_R_KY_FAIL = -13,
	RET_WRITELINEARFITPARTOREG_COMPARE_KY_FAIL = -14,
	RET_WRITELINEARFITPARTOREG_R_BX_FAIL = -15,
	RET_WRITELINEARFITPARTOREG_COMPARE_BX_FAIL = -16,
	RET_WRITELINEARFITPARTOREG_R_BY_FAIL = -17,
	RET_WRITELINEARFITPARTOREG_COMPARE_BY_FAIL = -18,
};

enum DrawSquareTestError {
	RET_DRAWSQUARETEST_OISOFF_FAIL = -1,
	RET_DRAWSQUARETEST_UNLOCKDEBUG_FAIL = -2,
	RET_DRAWSQUARETEST_WRITELOOPSTATUS_FAIL = -3,
	RET_DRAWSQUARETEST_OISON_FAIL = -4,
	RET_DRAWSQUARETEST_WRITETARGETX0_FAIL = -5,
	RET_DRAWSQUARETEST_WRITETARGETY0_FAIL = -6,
	RET_DRAWSQUARETEST_WRITETARGETXUP_FAIL = -7,
	RET_DRAWSQUARETEST_WRITETARGETY_FAIL = -8,
	RET_DRAWSQUARETEST_WRITETARGETX_FAIL = -9,
};

enum GetAngularSpeedError {
	RET_GETANGULARSPEED_X_READ_FAIL = -1,
	RET_GETANGULARSPEED_Y_READ_FAIL = -2,
	RET_GETANGULARSPEED_Z_READ_FAIL= -3,
};

enum GetAccelSpeedError {
	RET_GETACCELSPEED_X_READ_FAIL = -1,
	RET_GETACCELSPEED_Y_READ_FAIL = -2,
	RET_GETACCELSPEED_Z_READ_FAIL = -3,
};

enum GetGyroThetaError {
	RET_GETGYROTHETA_X_READ_FAIL = -1,
	RET_GETGYROTHETA_Y_READ_FAIL = -2,
};

enum SetChipModeError {
	RET_SETCHIPMODE_OISOFF_FAIL = -1,
	RET_SETCHIPMODE_UNLOCK_POW_PROTECT_FAIL = -2,
	RET_SETCHIPMODE_W_CHIPMODE_FAIL = -3,
	RET_SETCHIPMODE_UNLOCK_CCM_PROTECT_FAIL = -4,
	RET_SETCHIPMODE_UNLOCK_DEBUG_PROTECT_FAIL = -5,
	RET_SETCHIPMODE_UNLOCK_FLASH_PROTECT_FAIL = -6,
};

enum GetChipModeError {
	RET_GETCHIPMODE_READ_FAIL = -1,
};

enum WriteLensOffsetXError {
	RET_WRITRLENSOFFSETX_READ_PIXELSTEPX_FAIL = -1,
	RET_WRITELENSOFFSETX_W_LENSOFFSETX_FAIL = -2,
	RET_WRITELENSOFFSETX_R_LENSOFFSETX_FAIL = -3,
	RET_WRITELENSOFFSETX_COMPARE_LENSOFFSETX_FAIL = -4,
};

enum WriteLensOffsetYError {
	RET_WRITRLENSOFFSETY_READ_PIXELSTEPY_FAIL = -1,
	RET_WRITELENSOFFSETY_W_LENSOFFSETY_FAIL = -2,
	RET_WRITELENSOFFSETY_R_LENSOFFSETY_FAIL = -3,
	RET_WRITELENSOFFSETY_COMPARE_LENSOFFSETY_FAIL = -4,
};

enum WriteLensOffsetAndUpdateError {
	RET_WRITRLENSOFFSETANDUPDATE_OISOFF_FAIL = -1,
	RET_WRITRLENSOFFSETANDUPDATE_UNLOCKFLASHPROTECT_FAIL = -2,
	RET_WRITRLENSOFFSETANDUPDATE_W_LENSOFFSETX_FAIL = -3,
	RET_WRITRLENSOFFSETANDUPDATE_W_LENSOFFSETY_FAIL = -4,
	RET_WRITRLENSOFFSETANDUPDATE_FLASH_UPDATE_FAIL = -5,
};

enum WriteLensOffsetXCodeError {
	RET_WRITRLENSOFFSETXCODE_W_LENSOFFSETX_FAIL = -1,
	RET_WRITRLENSOFFSETXCODE_R_LENSOFFSETX_FAIL = -2,
	RET_WRITRLENSOFFSETXCODE_COMPARE_LENSOFFSETX_FAIL = -3,
};

enum WriteLensOffsetYCodeError {
	RET_WRITRLENSOFFSETYCODE_W_LENSOFFSETY_FAIL = -1,
	RET_WRITRLENSOFFSETYCODE_R_LENSOFFSETY_FAIL = -2,
	RET_WRITRLENSOFFSETYCODE_COMPARE_LENSOFFSETY_FAIL = -3,
};

enum WriteLensOffsetCodeAndUpdateError {
	RET_WRITRLENSOFFSETCODEANDUPDATE_OISOFF_FAIL = -1,
	RET_WRITRLENSOFFSETCODEANDUPDATE_UNLOCKFLASHPROTECT_FAIL = -2,
	RET_WRITRLENSOFFSETCODEANDUPDATE_W_LENSOFFSETX_FAIL = -3,
	RET_WRITRLENSOFFSETCODEANDUPDATE_W_LENSOFFSETY_FAIL = -4,
	RET_WRITRLENSOFFSETCODEANDUPDATE_FLASH_UPDATE_FAIL = -5,
};

enum WritePixelStepXError {
	RET_WRITEPIXELSTEPX_W_PIXELSTEPX_FAIL = -1,
	RET_WRITEPIXELSTEPX_R_PIXELSTEPX_FAIL = -2,
	RET_WRITEPIXELSTEPX_COMPARE_PIXELSTEPX_FAIL = -3,
};

enum WritePixelStepYError {
	RET_WRITEPIXELSTEPY_W_PIXELSTEPY_FAIL = -1,
	RET_WRITEPIXELSTEPY_R_PIXELSTEPY_FAIL = -2,
	RET_WRITEPIXELSTEPY_COMPARE_PIXELSTEPY_FAIL = -3,
};

enum SetMotionModeError {
	RET_SETMOTIONMODE_OISOFF_FAIL = -1,
	RET_SETMOTIONMODE_UNLOCK_ALGOPAR_PROTECT_FAIL = -2,
	RET_SETMOTIONMODE_W_MOTIONMODE_FAIL = -3,
	RET_SETMOTIONMODE_R_MOTIONMODE_FAIL = -4,
	RET_SETMOTIONMODE_COMPARE_MOTIONMODE_FAIL = -5,
};

enum WriteGyroOffsetToRegError {
	RET_WRITEGYROOFFSETTOREG_W_GYROOFFSETX_FAIL = -1,
	RET_WRITEGYROOFFSETTOREG_W_GYROOFFSETY_FAIL = -2,
	RET_WRITEGYROOFFSETTOREG_W_GYROOFFSETZ_FAIL = -3,
	RET_WRITEGYROOFFSETTOREG_R_GYROOFFSETX_FAIL = -4,
	RET_WRITEGYROOFFSETTOREG_COMPARE_GYROOFFSETX_FAIL = -5,
	RET_WRITEGYROOFFSETTOREG_R_GYROOFFSETY_FAIL = -6,
	RET_WRITEGYROOFFSETTOREG_COMPARE_GYROOFFSETY_FAIL = -7,
	RET_WRITEGYROOFFSETTOREG_R_GYROOFFSETZ_FAIL = -8,
	RET_WRITEGYROOFFSETTOREG_COMPARE_GYROOFFSETZ_FAIL = -9,
};

enum WriteGyroOffsetAndUpdateError {
	RET_WRITEGYROOFFSETANDUPDATE_OISOFF_FAIL = -1,
	RET_WRITEGYROOFFSETANDUPDATE_UNLOCKFLASHPROTECT_FAIL = -2,
	RET_WRITEGYROOFFSETANDUPDATE_W_GYROOFFSET_FAIL = -3,
	RET_WRITEGYROOFFSETANDUPDATE_FLASHUPDATE_FAIL = -4,
};

enum ReadGyroOffsetError {
	RET_READGYROOFFSET_R_GYROOFFSETX_FAIL = -1,
	RET_READGYROOFFSET_R_GYROOFFSETY_FAIL = -2,
	RET_READGYROOFFSET_R_GYROOFFSETZ_FAIL = -3,
};

enum LensOffsetCalError {
	RET_LENSOFFSETCAL_OISOFF_FAIL = -1,
	RET_LENSOFFSETCAL_UNLOCK_DEBUG_FAIL = -2,
	RET_LENSOFFSETCAL_UNLOCK_FLASH_FAIL = -3,
	RET_LENSOFFSETCAL_WRITELOOPSTATUS_FAIL = -4,
	RET_LENSOFFSETCAL_OISON_FAIL = -5,
	RET_LENSOFFSETCAL_W_TARGETX_FAIL = -6,
	RET_LENSOFFSETCAL_W_TARGETY_FAIL = -7,
	RET_LENSOFFSETCAL_R_ADC_FAIL = -8,
	RET_LENSOFFSETCAL_W_LENSOFFSETX_FAIL = -9,
	RET_LENSOFFSETCAL_W_LENSOFFSETY_FAIL = -10,
	RET_LENSOFFSETCAL_OISOFF2_FAIL = -11,
	RET_LENSOFFSETCAL_FLASHUPDATE_FAIL = -12,
	RET_LENSOFFSETCAL_THRESHOLD_FAIL = -13,
	RET_LENSOFFSETCAL_X_OUTRANGE_FAIL = -14,
	RET_LENSOFFSETCAL_Y_OUTRANGE_FAIL = -15,
};

enum DrawCircleTestError {
	RET_DRAWCIRCLETEST_R_GYROGAIN_FAIL = -1,
	RET_DRAWCIRCLETEST_OISOFF_FAIL = -2,
	RET_DRAWCIRCLETEST_UNLOCKDEBUG_FAIL = -3,
	RET_DRAWCIRCLETEST_WRITELOOPSTATUS1_FAIL = -4,
	RET_DRAWCIRCLETEST_OISON_FAIL = -5,
	RET_DRAWCIRCLETEST_W_TARGETX0_FAIL = -6,
	RET_DRAWCIRCLETEST_W_TARGETY0_FAIL = -7,
	RET_DRAWCIRCLETEST_W_TARGETX_FAIL = -8,
	RET_DRAWCIRCLETEST_W_TARGETY_FAIL = -9,
	RET_DRAWCIRCLETEST_R_LINEOUT1_FAIL = -10,
	RET_DRAWCIRCLETEST_R_LINEOUT2_FAIL = -11,
	RET_DRAWCIRCLETEST_R_LINEOUT3_FAIL = -12,
	RET_DRAWCIRCLETEST_W_TARGETX0_FAIL2 = -13,
	RET_DRAWCIRCLETEST_W_TARGETY0_FAIL2 = -14,
	RET_DRAWCIRCLETEST_OISOFF_FAIL2 = -15,

};


enum WriteAfDriftParError {
	RET_WRITEAFDRIFTPARTOREG_WRITEA0X_FAIL = -1,
	RET_WRITEAFDRIFTPARTOREG_WRITEB0X_FAIL = -2,
	RET_WRITEAFDRIFTPARTOREG_WRITEC0X_FAIL = -3,
	RET_WRITEAFDRIFTPARTOREG_WRITEA0Y_FAIL = -4,
	RET_WRITEAFDRIFTPARTOREG_WRITEB0Y_FAIL = -5,
	RET_WRITEAFDRIFTPARTOREG_WRITEC0Y_FAIL = -6,
	RET_WRITEAFDRIFTPARTOREG_R_A0X_FAIL = -7,
	RET_WRITEAFDRIFTPARTOREG_COMPARE_A0X_FAIL = -8,
	RET_WRITEAFDRIFTPARTOREG_R_B0X_FAIL = -9,
	RET_WRITEAFDRIFTPARTOREG_COMPARE_B0X_FAIL = -10,
	RET_WRITEAFDRIFTPARTOREG_R_C0X_FAIL = -11,
	RET_WRITEAFDRIFTPARTOREG_COMPARE_C0X_FAIL = -12,
	RET_WRITEAFDRIFTPARTOREG_R_A0Y_FAIL = -13,
	RET_WRITEAFDRIFTPARTOREG_COMPARE_A0Y_FAIL = -14,
	RET_WRITEAFDRIFTPARTOREG_R_B0Y_FAIL = -15,
	RET_WRITEAFDRIFTPARTOREG_COMPARE_B0Y_FAIL = -16,
	RET_WRITEAFDRIFTPARTOREG_R_C0Y_FAIL = -17,
	RET_WRITEAFDRIFTPARTOREG_COMPARE_C0Y_FAIL = -18,
};

enum EnableAfDriftParError {
	RET_ENAFDRIFT_OISOFF_FAIL = -1,
	RET_ENAFDRIFT_UNLOCK_FLASH_FAIL = -2,
	RET_ENAFDRIFT_UPDATE1_FAIL = -3,
	RET_ENAFDRIFTPARTOREG_WRITEA0X_FAIL = -4,
	RET_ENAFDRIFTPARTOREG_WRITEB0X_FAIL = -5,
	RET_ENAFDRIFTPARTOREG_WRITEC0X_FAIL = -6,
	RET_ENAFDRIFTPARTOREG_WRITEA0Y_FAIL = -7,
	RET_ENAFDRIFTPARTOREG_WRITEB0Y_FAIL = -8,
	RET_ENAFDRIFTPARTOREG_WRITEC0Y_FAIL = -9,
	RET_ENAFDRIFTPARTOREG_R_A0X_FAIL = -10,
	RET_ENAFDRIFTPARTOREG_COMPARE_A0X_FAIL = -11,
	RET_ENAFDRIFTPARTOREG_R_B0X_FAIL = -12,
	RET_ENAFDRIFTPARTOREG_COMPARE_B0X_FAIL = -13,
	RET_ENAFDRIFTPARTOREG_R_C0X_FAIL = -14,
	RET_ENAFDRIFTPARTOREG_COMPARE_C0X_FAIL = -15,
	RET_ENAFDRIFTPARTOREG_R_A0Y_FAIL = -16,
	RET_ENAFDRIFTPARTOREG_COMPARE_A0Y_FAIL = -17,
	RET_ENAFDRIFTPARTOREG_R_B0Y_FAIL = -18,
	RET_ENAFDRIFTPARTOREG_COMPARE_B0Y_FAIL = -19,
	RET_ENAFDRIFTPARTOREG_R_C0Y_FAIL = -20,
	RET_ENAFDRIFTPARTOREG_COMPARE_C0Y_FAIL = -21,
};

enum DriveAFDRIFTError {
	RET_DRIVEAFDRIFT_OISOFF_FAIL = -1,
	RET_DRIVEAFDRIFT_UNLOCK_DEBUG_FAIL = -2,
	RET_DRIVEAFDRIFT_UNLOCK_FLASH_FAIL = -3,
	RET_DRIVEAFDRIFT_UPDATE1_FAIL = -4,
	RET_DRIVEAFDRIFT_OPENLOOP_FAIL = -5,
	RET_DRIVEAFDRIFT_OISON_FAIL = -6,
	RET_DRIVEAFDRIFT_UNLOCK_CCM_FAIL = -7,
};

enum CloseAFDRIFTError {
	RET_CLOSEAFDRIFT_OISOFF_FAIL = -1,
	RET_CLOSEAFDRIFT_UPDATE2_FAIL = -2,
};

typedef struct CALDATA {
	//Hall cal
	BYTE byPgaGain[2]; // x, y
	BYTE byHallBias[2]; // x, y
	UINT16 u16HallOffset[2]; // x, y

	//Gyro offset cal
	INT16 n16GyroOffset[3]; // x, y, z

	//Hall max/min
	FLOAT fHallMaxX;
	FLOAT fHallMaxY;
	FLOAT fHallMinX;
	FLOAT fHallMinY;

	//Loop gain
	FLOAT fLoopGainX;
	FLOAT fLoopGainY;

	//gyro gain
	FLOAT fGyroGainX;
	FLOAT fGyroGainY;

	//crosstalk
	FLOAT fCrosstalkParaXA0;
	FLOAT fCrosstalkParaYA0;
	FLOAT fCrosstalkParaXB0;
	FLOAT fCrosstalkParaYB0;
	FLOAT fCrosstalkParaXC0;
	FLOAT fCrosstalkParaYC0;

	//Hall code
	INT16 n16HallCodeX[9];
	INT16 n16HallCodeY[9];

	//linearity
	FLOAT fLinearityXK[8];
	FLOAT fLinearityXB[8];
	FLOAT fLinearityYK[8];
	FLOAT fLinearityYB[8];

	// GyroSin
	FLOAT fGyroSin;
	FLOAT fGyroCos;

	// Pixel
	FLOAT fPixelStepX;
	FLOAT fPixelStepY;

	// LensOffset
	INT16 n16LensOffsetX;
	INT16 n16LensOffsetY;

	// K0K1
	FLOAT fCrosstalkK0X;
	FLOAT fCrosstalkK1X;
	FLOAT fCrosstalkK0Y;
	FLOAT fCrosstalkK1Y;

	//Hex
	//Hall max/min
	UINT32 u32HallMaxX;
	UINT32 u32HallMaxY;
	UINT32 u32HallMinX;
	UINT32 u32HallMinY;
	//Loop gain
	UINT32 u32LoopGainX;
	UINT32 u32LoopGainY;
	//gyro gain
	UINT32 u32GyroGainX;
	UINT32 u32GyroGainY;
	//crosstalk
	UINT32 u32CrosstalkParaXA0;
	UINT32 u32CrosstalkParaYA0;
	UINT32 u32CrosstalkParaXB0;
	UINT32 u32CrosstalkParaYB0;
	UINT32 u32CrosstalkParaXC0;
	UINT32 u32CrosstalkParaYC0;
	//linearity
	UINT32 u32LinearityXK[8];
	UINT32 u32LinearityXB[8];
	UINT32 u32LinearityYK[8];
	UINT32 u32LinearityYB[8];
	// GyroSin
	UINT32 u32GyroSin;
	UINT32 u32GyroCos;
	// Pixel
	UINT32 u32PixelStepX;
	UINT32 u32PixelStepY;
	// K0K1
	UINT32 u32CrosstalkK0X;
	UINT32 u32CrosstalkK1X;
	UINT32 u32CrosstalkK0Y;
	UINT32 u32CrosstalkK1Y;

	//Af drift
	UINT32 u32AfDriftParaXA0;
	UINT32 u32AfDriftParaYA0;
	UINT32 u32AfDriftParaXB0;
	UINT32 u32AfDriftParaYB0;
	UINT32 u32AfDriftParaXC0;
	UINT32 u32AfDriftParaYC0;

	FLOAT fAfDriftParaXA0;
	FLOAT fAfDriftParaYA0;
	FLOAT fAfDriftParaXB0;
	FLOAT fAfDriftParaYB0;
	FLOAT fAfDriftParaXC0;
	FLOAT fAfDriftParaYC0;

}tCalData;

typedef struct FRADATA {
	//in
	BYTE byAxis;
	BYTE byAmp;
	UINT16 u16Fre;

	//out
	FLOAT fGm;
	FLOAT fPm;
}tFraData;

typedef struct CROSSLINEIN {
	BOOL bCrosstalkCal;
	BOOL bLinearFit;
	FLOAT fTargetBuff[9];
	FLOAT fPosXX[9];
	FLOAT fPosXY[9];
	FLOAT fPosYX[9];
	FLOAT fPosYY[9];
}tCrossLineIn;

typedef struct CROSSLINEOUT1 {
	FLOAT fCrossA0X;
	FLOAT fCrossB0X;
	FLOAT fCrossC0X;
	FLOAT fCrossA0Y;
	FLOAT fCrossB0Y;
	FLOAT fCrossC0Y;
	FLOAT fPixelStepX;
	FLOAT fPixelStepY;
}tCrossLineCrossParOut;

typedef struct LINEARDATA {
	//nine point
	INT16 n16LinearAdcRangeX[17];
	FLOAT fLinearKX[16];
	FLOAT fLinearBX[16];

	INT16 n16LinearAdcRangeY[17];
	FLOAT fLinearKY[16];
	FLOAT fLinearBY[16];

	FLOAT fLinearError;
}tLinearFitData;

//Draw Square Test
typedef struct SQUARETEST {
	FLOAT fRangeDownX;
	FLOAT fRangeUpX;
	FLOAT fRangeStepX;
	FLOAT fRangeDownY;
	FLOAT fRangeUpY;
	FLOAT fRangeStepY;
	UINT uDelayMs;
}tSquareTestIn;

typedef struct AFDRIFTIN {
	FLOAT fTargetBuff[9];
	FLOAT fPosXX[9];
	FLOAT fPosYY[9];
}tAfDriftIn;


typedef struct AFDRIFTOUTT1 {
	FLOAT fCrossA0X;
	FLOAT fCrossB0X;
	FLOAT fCrossC0X;
	FLOAT fCrossA0Y;
	FLOAT fCrossB0Y;
	FLOAT fCrossC0Y;
}tAfDriftParOut;


class DLLIMPORT CAW86006_OIS_API
{
public:
	CAW86006_OIS_API(void);
	~CAW86006_OIS_API(void);

	void GetDllVersion(BYTE* byBuff);

	// Init
	INT OIS_ExtFuncInit(DLL_ExtFuncList* pExtFuncList);

	// Reset chip
	INT ResetChip();

	// Download the firmware
	INT BootControl(INT nTimes = 20, INT nDelayTime = 2);
	INT MoveBinDownload(BYTE* bypBinBuf, UINT32 u32Len);
	INT FlashDownload(BYTE* bypBinBuf, UINT32 u32Len);
	INT JumpInstruction();
	INT ShakeHands();

	INT OisOn();
	INT OisOff();

	// Hall calibration
	INT HallCal(BYTE byHallBiasRangeDown, BYTE byHallBiasRangeUp);
	INT GyroOffset();

	//0:x; 1:y; 2:z;
	INT WriteGyroOffsetToReg(INT16* n16pGyroOffsetBuff);
	INT WriteGyroOffsetAndUpdate(INT16* n16pGyroOffsetBuff);
	INT ReadGyroOffset(INT16* n16pGyroOffsetBuff);

	// Obtaining calibration data
	INT GetCalData(tCalData* tpCalData);

	INT FlashErase();
	INT FlashUpdate();
	INT FlashRead();

	INT UnLockFlashProtect();
	INT LockFlashProtect();
	INT UnLockDebugProtect();
	INT LockDebugProtect();

	INT WriteAfCode(UINT16 u16AfCode);
	INT WriteAfArct(BYTE byValue);
	INT WriteAfDivMode(BYTE byDiv, BYTE byMode);
	INT WriteAmpPeriod(BYTE byIndex, BYTE byValue);

	INT WriteGyroGain0X(FLOAT fValue);
	INT WriteGyroGain0Y(FLOAT fValue);
	INT WriteAcclGainX(FLOAT fValue);
	INT WriteAcclGainY(FLOAT fValue);
	INT WriteGyroSin(FLOAT fValue);
	INT WriteGyroCos(FLOAT fValue);
	INT WriteLensOffsetX(INT16 n16Value);
	INT WriteLensOffsetY(INT16 n16Value);
	INT WriteLensOffsetAndUpdate(INT16 n16LensOffsetX, INT16 n16LensOffsetY);
	INT WriteLensOffsetXCode(INT16 n16CodeValue);
	INT WriteLensOffsetYCode(INT16 n16CodeValue);
	INT WriteLensOffsetCodeAndUpdate(INT16 n16LensOffsetXCode, INT16 n16LensOffsetYCode);

	INT LensOffsetCal(INT nThreshold1, INT nThreshold2);

	INT WritePixelStepX(FLOAT fValue);
	INT WritePixelStepY(FLOAT fValue);

	INT ReadGyroGain0(FLOAT* fpBuff);
	INT ReadAcclGain(FLOAT* fpBuff);

	INT GetVersionId(BYTE* bypIdBuff);

	INT WriteTargetX(FLOAT fValue);
	INT WriteTargetY(FLOAT fValue);
	INT WriteLoopGainX(FLOAT fValue);
	INT WriteLoopGainY(FLOAT fValue);

	INT WriteDistancePosLimitX(FLOAT fValue);
	INT WriteDistancePosLimitY(FLOAT fValue);
	INT WriteDistanceNegLimitX(FLOAT fValue);
	INT WriteDistanceNegLimitY(FLOAT fValue);

	// Crosstalk calibration
	INT WriteCrosstalkPar(FLOAT* fpBuff);
	INT DriveCrosstalk();
	INT CrosstalkCal(FLOAT fRangeDown, FLOAT fRangeUp, FLOAT fStep, INT nAxis, FLOAT* fpCenter, FLOAT fPixelToAdc);
	INT CloseCrosstalk();

	// LoopGain calibration
	INT LoopGainCal(float fRangeDown, float fRangeUp);
	INT LoopGainCal2(UINT16 u16Fre, BYTE u8Amp, float fCaldBX, float fCaldBY, float fRangeDown, float fRangeUp);
	INT ServeOn();
	INT ServeOff();

	INT WriteLoopStatus(BYTE byLoopStatus);
	INT ReadAdc(INT16* n16pAdcBuff);

	// Linear fitting, Requirement: fpPosBuff range; - 2000 ~ 2000
	INT NinePointFitting(BYTE byAxis, INT16* n16pDacBuff, FLOAT* fpPosBuff, tLinearFitData* tpLinearData);
	INT WriteAdcCodeKB(tLinearFitData* tpLinearData, BOOL bUpdateToFlash);

	// FRA
	INT FraTest(tFraData* tpFraTest);

	// Linear fitting restores default values
	INT ReLinearFittingDefault(BOOL bOn);
	INT ReadLineOut(FLOAT* fpBuff);

	// Draw circle and square
	INT DrawCircleOn(INT nAxisValue, INT nCircleValue);
	INT DrawCircleOff(INT nAxisValue, INT nCircleValue);
	INT DrawSquareOn(INT nAxisValue, INT nSquareValue);
	INT DrawSquareOff(INT nAxisValue, INT nSquareValue);

	// Write K0/K1
	INT WriteK0K1X(FLOAT fK0Value, FLOAT fK1Value);
	INT WriteK0K1Y(FLOAT fK0Value, FLOAT fK1Value);

	// CrossLine
	INT CrossLineCal(tCrossLineIn* tpCrossLineIn, tCrossLineCrossParOut* tpCrossLineCrossParOut, tLinearFitData* tpLineOut);

	INT WriteCrosstalkParToReg(tCrossLineCrossParOut* tpCrossLineCrossParOut);
	INT WriteLinearFitParToReg(tLinearFitData* tpLineOut);

	//Draw Square Test
	INT DrawSquareTest(tSquareTestIn* tpSquareTestIn);

	INT GetAngularSpeed(INT16* pBuff);
	INT GetAccelSpeed(INT16* pBuff);
	INT GetGyroTheta(FLOAT* pBuff);

	INT SetChipMode(BYTE byMode);
	INT GetChipMode(BYTE& byPowStatus);

	INT SetMotionMode(BYTE byMode);

	INT DrawCircleTest(float fRadius, UINT uPointNum, float fAccuracy, float fEFL, UINT uDelayMs, UINT& uRetErrCount);

	// Afdrift calibration
	INT DriveAfdrift();
	INT AfdriftCal(tAfDriftIn* tpCrossLineIn, tAfDriftParOut* tpAfDriftParOut);
	INT CloseAfdrift();
	INT WriteAfdriftParToReg(tAfDriftParOut* tpAfDriftParOut);
};

#endif //__AW86006_OIS_API_DLL


#ifdef __cplusplus
extern "C" {
#endif

	DLLEXPORT void AwGetDllVersion(BYTE* byBuff);

	// Init
	DLLEXPORT INT AW_OIS_ExtFuncInit(DLL_ExtFuncList* pExtFuncList);

	// Reset Chip
	DLLEXPORT INT AwResetChip();
	
	// Reset Chip by I2C Addr Modify
	DLLEXPORT INT AwResetChipAfterI2CModify();
	
	// Auto Scan
	DLLEXPORT INT AwAutoScan(BYTE *AddrList, BYTE* num);
	
	// Modify the I2C address
	DLLEXPORT INT AwI2cAddrModify(BYTE SyncAddr);

	// Download the firmware
	DLLEXPORT INT AwBootControl(INT times = 20, INT delay_time = 2);
	DLLEXPORT INT AwMoveBinDownload(BYTE* bypBinBuf, UINT32 u32Len);
	DLLEXPORT INT AwFlashDownload(BYTE* bypBinBuf, UINT32 u32Len);
	DLLEXPORT INT AwJumpInstruction();
	DLLEXPORT INT AwShakeHands();

	DLLEXPORT INT AwOisOn();
	DLLEXPORT INT AwOisOff();

	// Hall calibration
	DLLEXPORT INT AwHallCal(BYTE byHallBiasRangeDown, BYTE byHallBiasRangeUp);

	DLLEXPORT INT AwFlashUpdate();
	DLLEXPORT INT AwFlashErase();
	DLLEXPORT INT AwFlashRead();

	DLLEXPORT INT AwWriteGyroGain0X(FLOAT fValue);
	DLLEXPORT INT AwWriteGyroGain0Y(FLOAT fValue);
	DLLEXPORT INT AwWriteGyroSin(FLOAT fValue);
	DLLEXPORT INT AwWriteGyroCos(FLOAT fValue);
	DLLEXPORT INT AwReadGyroGain0(FLOAT* fpBuff);

	DLLEXPORT INT AwWriteAfCode(UINT16 u16AfCode);
	DLLEXPORT INT AwWriteAfArct(BYTE byValue);
	DLLEXPORT INT AwWriteAfDivMode(BYTE byDiv, BYTE byMode);
	DLLEXPORT INT AwWriteAmpPeriod(BYTE byIndex, BYTE byValue);

	DLLEXPORT INT AwGyroOffset();
	DLLEXPORT INT AwGetCalData(tCalData* tpCalData);

	DLLEXPORT INT AwGetVersionId(BYTE* bypIdBuff);
	DLLEXPORT INT AwGetChipId(BYTE* bypIdBuff);

	DLLEXPORT INT AwUnLockFlashProtect();
	DLLEXPORT INT AwLockFlashProtect();
	DLLEXPORT INT AwUnLockDebugProtect();
	DLLEXPORT INT AwLockDebugProtect();

	DLLEXPORT INT AwWriteTargetX(FLOAT fValue);
	DLLEXPORT INT AwWriteTargetY(FLOAT fValue);

	DLLEXPORT INT AwWriteLoopGainX(FLOAT fValue);
	DLLEXPORT INT AwWriteLoopGainY(FLOAT fValue);

	DLLEXPORT INT AwWriteDistancePosLimitX(FLOAT fValue);
	DLLEXPORT INT AwWriteDistancePosLimitY(FLOAT fValue);
	DLLEXPORT INT AwWriteDistanceNegLimitX(FLOAT fValue);
	DLLEXPORT INT AwWriteDistanceNegLimitY(FLOAT fValue);

	// Afdrift calibration
	DLLEXPORT INT AwDriveAfdrift();
	DLLEXPORT INT AwCloseAfdrift();
	DLLEXPORT INT AwAfdriftCal(tAfDriftIn* tpCrossLineIn, tAfDriftParOut* tpAfDriftParOut);
	DLLEXPORT INT AwWriteAfdriftParToReg(tAfDriftParOut* tpAfDriftParOut);

	// Afdrift calibration 2
	DLLEXPORT INT AwDriveAfdrift2();
	DLLEXPORT INT AwCloseAfdrift2();
	DLLEXPORT INT AwAfdriftCal2(tAfDriftIn* tpAfdriftIn, tAfDriftParOut* tpAfDriftParOut);
	DLLEXPORT INT AwWriteAfdriftParToReg2(tAfDriftParOut* tpAfDriftParOut);

	// Crosstalk calibration
	DLLEXPORT INT AwDriveCrosstalk();
	DLLEXPORT INT AwCrosstalkCal(FLOAT fRangeDown, FLOAT fRangeUp, FLOAT fStep, INT nAxis, FLOAT* fpCenter, FLOAT fPixelToAdc);
	DLLEXPORT INT AwCloseCrosstalk();
	DLLEXPORT INT AwWriteCrosstalkPar(FLOAT* fpBuff);

	// LoopGain calibration
	DLLEXPORT INT AwLoopGainCal(float fRangeDown, float fRangeUp);
	DLLEXPORT INT AwLoopGainCal2(UINT16 u16Fre, BYTE u8Amp, float fCaldBX, float fCaldBY, float fRangeDown, float fRangeUp);
	DLLEXPORT INT AwServeOn();
	DLLEXPORT INT AwServeOff();
	DLLEXPORT INT AwWriteLoopStatus(BYTE byLoopStatus);

	DLLEXPORT INT AwReadAdc(INT16* n16pAdcBuff);

	// Linear fitting
	DLLEXPORT INT AwNinePointFitting(BYTE byAxis, INT16* n16pDacBuff, FLOAT* fpPosBuff, tLinearFitData* tpLinearData);
	DLLEXPORT INT AwWriteAdcCodeKB(tLinearFitData* tpLinearData, BOOL bUpdateToFlash);

	// Fra
	DLLEXPORT INT AwFraTest(tFraData* tpFraTest);

	// Linear fitting restores default values
	DLLEXPORT INT AwReLinearFittingDefault(BOOL bOn);
	DLLEXPORT INT AwReadLineOut(FLOAT* fpBuff);

	// Draw circle and square
	DLLEXPORT INT AwDrawCircleOn(INT nAxisValue, INT nCircleValue);
	DLLEXPORT INT AwDrawCircleOff(INT nAxisValue, INT nCircleValue);
	DLLEXPORT INT AwDrawSquareOn(INT nAxisValue, INT nSquareValue);
	DLLEXPORT INT AwDrawSquareOff(INT nAxisValue, INT nSquareValue);

	// Write K0/K1
	DLLEXPORT INT AwWriteK0K1X(FLOAT fK0Value, FLOAT fK1Value);
	DLLEXPORT INT AwWriteK0K1Y(FLOAT fK0Value, FLOAT fK1Value);

	// CrossLine
	DLLEXPORT INT AwCrossLineCal(tCrossLineIn* tpCrossLineIn, tCrossLineCrossParOut* tpCrossLineCrossParOut, tLinearFitData* tpLineOut);
	DLLEXPORT INT AwWriteCrosstalkParToReg(tCrossLineCrossParOut* tpCrossLineCrossParOut);
	DLLEXPORT INT AwWriteLinearFitParToReg(tLinearFitData* tpLineOut);

	// Draw Square Test
	DLLEXPORT INT AwDrawSquareTest(tSquareTestIn* tpSquareTestIn);

	DLLEXPORT INT AwGetAngularSpeed(INT16* pBuff);
	DLLEXPORT INT AwGetAccelSpeed(INT16* pBuff);
	DLLEXPORT INT AwGetGyroTheta(FLOAT* pBuff);

	DLLEXPORT INT AwSetChipMode(BYTE byMode);
	DLLEXPORT INT AwGetChipMode(BYTE& byPowStatus);

	DLLEXPORT INT AwWritePixelStepX(FLOAT fValue);
	DLLEXPORT INT AwWritePixelStepY(FLOAT fValue);

	// n16Value:unit pixel
	DLLEXPORT INT AwWriteLensOffsetX(INT16 n16Value);
	DLLEXPORT INT AwWriteLensOffsetY(INT16 n16Value);
	DLLEXPORT INT AwWriteLensOffsetAndUpdate(INT16 n16LensOffsetX, INT16 n16LensOffsetY);
	// n16CodeValue:unit code
	DLLEXPORT INT AwWriteLensOffsetXCode(INT16 n16CodeValue);
	DLLEXPORT INT AwWriteLensOffsetYCode(INT16 n16CodeValue);
	DLLEXPORT INT AwWriteLensOffsetCodeAndUpdate(INT16 n16LensOffsetXCode, INT16 n16LensOffsetYCode);

	DLLEXPORT INT AwSetMotionMode(BYTE byMode);

	DLLEXPORT INT AwWriteGyroOffsetToReg(INT16* n16pGyroOffsetBuff);
	DLLEXPORT INT AwWriteGyroOffsetAndUpdate(INT16* n16pGyroOffsetBuff);
	DLLEXPORT INT AwReadGyroOffset(INT16* n16pGyroOffsetBuff);

	DLLEXPORT INT AwLensOffsetCal(INT nThreshold1, INT nThreshold2);

	DLLEXPORT INT AwDrawCircleTest(float fRadius, UINT uPointNum, float fAccuracy, float fEFL, UINT uDelayMs, UINT& uRetErrCount);

	DLLEXPORT INT AwWriteAcclGainX(FLOAT fValue);
	DLLEXPORT INT AwWriteAcclGainY(FLOAT fValue);
	DLLEXPORT INT AwReadAcclGain(FLOAT* fpBuff);

	DLLEXPORT BYTE AwGet7bitI2CSlaveAddr();
	DLLEXPORT void AwSet7bitI2CSlaveAddr(BYTE byAddr);

#ifdef __cplusplus
}
#endif